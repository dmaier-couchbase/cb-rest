{
  "name": "prebuild",
  "version": "2.8.1",
  "description": "A command line tool for easily doing prebuilds for multiple version of node/iojs on a specific platform",
  "scripts": {
    "test": "tape test/*-test.js && standard"
  },
  "keywords": [
    "prebuilt",
    "binaries",
    "native",
    "addon",
    "module",
    "c",
    "c++",
    "bindings",
    "devops"
  ],
  "dependencies": {
    "async": "^1.4.0",
    "expand-template": "^1.0.0",
    "ghreleases": "^1.0.2",
    "github-from-package": "0.0.0",
    "home-dir": "^1.0.0",
    "minimist": "^1.1.2",
    "mkdirp": "^0.5.1",
    "node-gyp": "^3.0.3",
    "npmlog": "^2.0.0",
    "pump": "^1.0.0",
    "rc": "^1.0.3",
    "simple-get": "^1.4.2",
    "tar-fs": "^1.7.0",
    "tar-stream": "^1.2.1"
  },
  "devDependencies": {
    "a-native-module": "^1.0.0",
    "rimraf": "^2.4.2",
    "standard": "~5.4.1",
    "tape": "^4.0.1",
    "xtend": "^4.0.0"
  },
  "bin": {
    "prebuild": "./bin.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mafintosh/prebuild.git"
  },
  "author": {
    "name": "Mathias Buus",
    "url": "@mafintosh"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/mafintosh/prebuild/issues"
  },
  "homepage": "https://github.com/mafintosh/prebuild",
  "readme": "# prebuild\n\nA command line tool for easily doing prebuilds for multiple version of node/iojs on a specific platform\n\n```\n$ npm install -g prebuild\n```\n\n[![build status](http://img.shields.io/travis/mafintosh/prebuild.svg?style=flat)](http://travis-ci.org/mafintosh/prebuild)\n\n## Features\n\n* Builds native modules for any version of node/iojs, without having to switch between different versions of node/iojs to do so. This works by only downloading the correct headers and telling `node-gyp` to use those instead of the ones installed on your system.\n* Installs (`--install`) prebuilt binaries from GitHub by default or from a host of your choice. The url format can be customized as you see fit.\n* Upload (`--upload`) prebuilt binaries to GitHub.\n* Installed binaries are cached in `~/.npm/_prebuilds/` so you only need to download them once.\n* Support for stripping (`--strip`) debug information.\n\n## Building\n\nCreate prebuilds for iojs `v2.4.0` and node `0.12.7` (`v` prefix is optional) and write them to `./prebuilds/`\n\n```\n$ cd a-native-module\n$ prebuild -t v2.4.0 -t 0.12.7\n```\n\nFor more options run `prebuild --help`. The prebuilds created are compatible with [node-pre-gyp](https://github.com/mapbox/node-pre-gyp)\n\n## Installing\n\n`prebuild` supports installing prebuilt binaries from GitHub by default. To install for your platform, use the `--install` flag.\n\n```\n$ prebuild --install\n```\n\nIf no suitable binary can be found, `prebuild` will fallback to `node-gyp rebuild`. Native modules that have a javascript fallback can use `--no-compile` to prevent this.\n\nOnce a binary has been downloaded `prebuild` will `require()` the module and if that fails it will also fallback to building it.\n\nInstalled binaries are cached in your npm cache meaning you'll only have to download them once.\n\nAdd `prebuild --install` to your `package.json` so the binaries will be installed when the module is installed\n\n```json\n{\n  \"name\": \"a-native-module\",\n  \"scripts\": {\n    \"install\": \"prebuild --install\"\n  },\n  \"dependencies\": {\n    \"prebuild\": \"^2.7.2\"\n  }\n}\n```\n\nIf you are hosting your binaries elsewhere you can provide a host to the `--install` flag. The host string can also be a template for constructing more intrinsic urls. Install from `example.com` with a custom format for the binary name:\n\n```\n$ prebuild --install https://example.com/{name}-{version}-{abi}-{platform}-{arch}.tar.gz\n```\n\n`--install` will download binaries when installing from npm and compile in other cases. If you want `prebuild` to always download binaries you can use `--download` instead of `--install`. Either way, if downloading fails for any reason, it will fallback to compiling the code.\n\nThere's also support for `node-pre-gyp` style by utilizing the `binary` property in `package.json`.\n\n### Formatting urls\n\nThe following placeholders can be used:\n\n* `{name}` or `{package_name}`: the package name taken from `package.json`\n* `{version}`: package version taken from `package.json`\n* `{major}`: major version taken from `version`\n* `{minor}`: minor version taken from `version`\n* `{patch}`: patch version taken from `version`\n* `{prerelease}`: prelease version taken from `version`\n* `{build}`: build version taken from `version`\n* `{abi}` or `{node_abi}`: ABI version of node/iojs taken from current `--target` or `process.version` if not specified, see `ABI` section below for more information\n* `{platform}`: platform taken from `--platform` or `process.platform` if not specified\n* `{arch}`: architecture taken from `--arch` or `process.arch` if not specified\n* `{configuration}`: `'Debug'` if `--debug` is specified, otherwise `'Release'`\n* `{module_name}`: taken from `binary.module_name` property from `package.json`\n\n## ABI\n\nYou just need to do a prebuild for every version of node/iojs that have new ABI (application binary interface).\n\nAs of writing the following command will prebuild all possible ABI versions for iojs and for all node versions greater than `0.8`:\n\n```\nprebuild -t 0.10.40 -t 0.12.7 -t 1.0.4 -t 1.8.4 -t 2.4.0\n```\n\nOptionally, to always build for the above versions you can add a rc file to `~/.prebuildrc` with the following content. Note that using `~/.prebuildrc` will instruct prebuild to do this for *all* modules. Instead you should consider adding a `.prebuildrc` inside your project, so the module determines which version it supports rather than a global setting.\n\n``` ini\ntarget[] = 0.10.40\ntarget[] = 0.12.7\ntarget[] = 1.0.4\ntarget[] = 1.8.4\ntarget[] = 2.4.0\n```\n\nAnother option is to use `--all` to build for *all* known abi versions (see [`targets.js`](https://github.com/mafintosh/prebuild/blob/master/targets.js) for currently available versions)\n\n```\n$ prebuild --all\n```\n\n## Uploading\n\n`prebuild` supports uploading prebuilds to GitHub releases. If the release doesn't exist, it will be created for you. To upload prebuilds simply add the `--upload <github-token>` option:\n\n```\n$ prebuild -t v2.4.0 -t 0.12.7 -u <github-token>\n```\n\nIf you don't want to use the token on cli you can also stick that in e.g. `~/.prebuildrc`:\n\n```json\n{\n  \"upload\": \"<github-token>\"\n}\n```\n\nNote that `--upload` will only upload the targets that was built and stored in `./prebuilds`, so `prebuild --upload <token> -t 2.4.0` will only upload the binary for the `2.4.0` target.\n\nYou can use `prebuild --upload-all` to upload all files from the `./prebuilds` folder.\n\nSee [this page](https://github.com/settings/tokens) for more information on how to create GitHub tokens.\n\n## Help\n\n```\n$ prebuild -h\nprebuild [options]\n\n  --path        -p  path        (make a prebuild here)\n  --target      -t  version     (version to prebuild against)\n  --all                         (prebuild for all known abi versions)\n  --install                     (download when using npm, compile otherwise)\n  --download    -d  [url]       (download prebuilds, no url means github)\n  --upload      -u  [gh-token]  (upload prebuilds to github)\n  --upload-all  -u  [gh-token]  (upload all files from ./prebuilds folder to github)\n  --preinstall  -i  script      (run this script before prebuilding)\n  --compile     -c              (compile your project using node-gyp)\n  --no-compile                  (skip compile fallback when downloading)\n  --strip                       (strip debug information)\n  --debug                       (set Debug or Release configuration)\n  --verbose                     (log verbosely)\n  --version                     (print prebuild version and exit)\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "prebuild@2.8.1",
  "dist": {
    "shasum": "316855eb19cf5d4d721932ab827dc73e8eedea81"
  },
  "_from": "prebuild@~2.8.1",
  "_resolved": "https://registry.npmjs.org/prebuild/-/prebuild-2.8.1.tgz"
}
