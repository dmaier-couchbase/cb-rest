{
  "description": "ODM for Couchbase Node.js driver.",
  "keywords": [
    "couchbase",
    "odm",
    "nosql",
    "json",
    "document"
  ],
  "main": "./lib/ottoman",
  "license": "Apache2",
  "name": "ottoman",
  "scripts": {
    "test": "jshint --verbose lib/*.js && mocha test/*.test.js"
  },
  "dependencies": {
    "couchbase": "~2.1.2",
    "uuid": "~2.0.1"
  },
  "devDependencies": {
    "chai": "~3.3.0",
    "istanbul": "~0.3.21",
    "mocha": "~2.3.3",
    "jsdoc": "~3.3.0-alpha9",
    "ink-docstrap": "git+https://github.com/brett19/docstrap.git#master",
    "jshint": "~2.6.3"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/couchbaselabs/ottoman.git"
  },
  "version": "1.0.2",
  "readme": "# Ottoman.js (Node.js ODM for Couchbase)\n\nOttoman is a ODM built for Couchbase and Node.js.  It is designed to remove all\nof the boilerplate neccessary to build Node.js apps with Couchbase.\n\n[![Build Status](https://api.travis-ci.org/couchbaselabs/node-ottoman.png)](https://travis-ci.org/couchbaselabs/node-ottoman)\n\n\n## Useful Links\n\nSource - [http://github.com/couchbaselabs/node-ottoman](http://github.com/couchbaselabs/node-ottoman)\n\nDocumentation - [http://ottomanjs.com/](http://ottomanjs.com/)\n\nBuild Your First Application - [/docs/first-app.md](https://github.com/couchbaselabs/node-ottoman/blob/master/docs/first-app.md)\n\nCouchbase Node.js Community - [http://couchbase.com/communities/nodejs](http://couchbase.com/communities/nodejs)\n\n## Why Use Ottoman\n\nAn ODM allows developers to:\n\n - Work natively with Javascript Objects.\n - Rapidly prototype and define your data model together with their relationships.\n - Let someone else handle the heavy lifting and tedious tasks.\n - Support many different data-types, including several which come predefined with Ottoman in addition to support for custom data-types.\n - Define your validation logic with the models it applies to.\n - Model your data for embedding objects or references and keep those relationships crisp.\n - Provide support for generic finds.\n - Support for multiple indexing strategies natively and automatically.\n - Control and enfoce your data model from within your application.\n - Programmatically define object methods that map to the data model.\n\n\n## Getting Started\n\n### Installing\n\nOttoman is not yet published to npm, to install the in development version\ndirectly from GitHub, run:\n```\nnpm install ottoman\n```\n\n\n### Introduction\n\nSet up your ottoman instance with a connection to couchbase.\n```javascript\nvar ottoman = require('ottoman');\nvar couchbase = require('couchbase');\nvar cluster = new couchbase.Cluster('couchbase://127.0.0.1');\nottoman.bucket = cluster.openBucket('default');\n```\n\nLet's say we want to track all of the furniture in our store.  Let's create a model to represent this furniture.\n```javascript\nvar Furniture = ottoman.model('Furniture', {\n  name: 'string'\n});\n```\n\nHow about we create our first furniture item.\n```javascript\nvar couch = new Furniture({name:'Couch'});\nconsole.log(couch.name); // 'Couch'\n```\n\nWe can also add methods directly to our models.\n```javascript\nFurniture.prototype.dance = function() {\n  console.log('I am furniture, I do not dance.');\n};\n```\n\nOur furniture now can take an action!\n```javascript\nvar table = new Furniture({name:'Table'});\ntable.dance();\n```\n\nBut we haven't actually saved anythign to Couchbase yet.  Let's do that:\n```javascript\ntable.save(function(err) {\n  if (err) return console.error(err);\n  table.dance();\n});\n```\n\nNow that we've saved our table to the database, we need to be able to retreive it.  Let's revise our model to add an index on the name!\n```javascript\nvar Furniture = ottoman.model('Furniture', {\n  name: 'string'\n}, {\n  index: {\n    findByName: {\n      by: 'name'\n    }\n  }\n});\n```\n\nNow we need to ensure that this index is available on the server for searching:\n```javascript\nottoman.ensureIndices(function(err) {\n  if (err) return console.error(err);\n});\n```\n\nAnd finally we can search for our furniture by name:\n```javascript\nFurniture.findByName('table', function(err, tables) {\n  if (err) return console.error(err);\n  console.log(tables);\n})\n```\n\n#### Nice Job!\nWe've now created our first model, gave it some methods, saved it to Couchbase and then retrieved it.\n\n#### What Next?\n\nNow that you've successfully built your first models, why not give our\nfull application tutorial a try?\n\n[Build Your First Application](https://github.com/couchbaselabs/node-ottoman/blob/master/docs/first-app.md)\n\n### Schemas\n\nSchema's define the layout of our stored data objects.  They contain a list of properties for the document, this can be any JSON representable data.\n\nYou can store simple types:\n```javascript\nottoman.model('User', {\n    who: 'string',\n    howmany: 'number',\n    when: 'Date'\n});\n```\n\nOttoman supports a number of standard types:\n\n- `string` - A string value.\n- `number` - A floating point value.\n- `integer` - An integer number.\n- `boolean` - A boolean value.\n- `Date` - A date value.\n- `mixed` - Any valid ottoman type, both models and built-in types.\n\nThese simple types can have default values specified or default value generators:\n```javascript\nottoman.model('User', {\n  title: {type: 'string', default: 'No Title'},\n  when: {type: 'Date', default: Date.now},\n  rander: {type: 'number', default: function(){ return Math.random(); }}\n});\n```\n\nWe can also have arrays:\n```javascript\nottoman.model('User', {\n  name: 'string',\n  roles: ['string']\n});\n```\n\nAnd groups:\n```javascript\nottoman.model('User', {\n  name: {\n    first: 'string',\n    last: 'string',\n    full: 'string'\n  }\n});\n```\n\nand arrays of groups:\n```javascript\nottoman.model('User', {\n  name: 'string',\n  roles: [{\n    type: 'string',\n    permissions: ['string']\n  }]\n});\n```\n\nYou can also define validator functions for model fields:\n```javascript\nfunction PhoneValidator(val) {\n  var phoneno = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n  if(val && !val.match(phoneno)) {\n    throw new Error('Phone number is invalid.');\n  }\n}\n\nottoman.model('User', {\n  name: 'string',\n  phone: { type:'string', validator:PhoneValidator },\n});\n```\n\n### Model References\n\nIn addition to supporting groups of properties, models also support referencing whole other documents.  Through these references we are able to store related by not neccessarily dependant data.\n\nExample reference relationship:\n```javascript\nvar Account = ottoman.model('Account', {\n  email: 'string',\n  name: 'string'\n});\nottoman.model('User', {\n  username: 'string',\n  account: Account\n});\n```\n\nAccessing the data of a referenced document is as simple as requesting the parent document; referenced documents will be loaded by default.\n\nExample of creating a referenced document:\n```javascript\nvar myAccount = new Account({\n  email: 'burtteh@fakemail.com',\n  name: 'Brett Lawson'\n});\nvar myUser = new User({\n  username: 'brett19',\n  account: myAccount;\n});\nmyUser.save(function(err) {\n  if (err) throw err;\n\n  console.log('Documents Saved!');\n});\n```\n\nExample of accessing the referenced document:\n```javascript\nUser.find({username: 'brett19'}, function(err, myUser) {\n  if (err) throw err;\n\n  console.log('My Email:', myUser.account.email);\n  // My Email: burtteh@fakemail.com\n});\n```\n\n\n### Indices\n\nYou can specify numerous indices on a model.  There are multiple different kinds of indices, each with it's own benefits and restrictions.\n\nTo specify indices on a model:\n```javascript\nottoman.model('User', {\n  email: 'string',\n  name: {\n    first: 'string',\n    last: 'string',\n    full: 'string'\n  }\n}, {\n  index: {\n    findByEmail: {\n      by: 'email',\n      type: 'refdoc'\n    },\n    findByFirstName: {\n      by: 'name.first',\n      type: 'view'\n    },\n    findByLastName: {\n      by: 'name.last',\n      type: 'n1ql'\n    }\n  }\n});\n```\n\nIt is also important to remember that in order for indices to be created on the server, you must call the `ensureIndices` method.  This method will internally generate a list of indexes which will be used and the most optimal configuration for them and them build any which are missing on the server.  This must be called after all models are defined, and it is a good idea to only call this when needed rather than any time your server is started.\n\n```javascript\nvar ottoman = require('ottoman');\nvar models = require('./all_my_models');\nottoman.ensureIndices(function(err) {\n  if (err) {\n    console.log('failed to created neccessary indices', err);\n    return;\n  }\n\n  console.log('ottoman indices are ready for use!');\n});\n```\n\n#### Index Types\n\n##### `refdoc`\nThese indices are the most performant.  They allow only a single document to occupy any particular value and do direct key-value lookups using a referential document to identify a matching document in Couchbase.\n\n##### `view`\nThese indices are the default and use map-reduce views.  This type of index is always available once `ensureIndices` is called and will work with any Couchbase Server version.\n\n##### `n1ql`\nThese indices utilize the new SQL-like query language available in Couchbase Server 4.0.0.  These indices are more performant than views in many cases and are significantly more flexible, allowing even un-indexed searches.\n\n\n### Queries\n\nQueries allow you to perform searches between your models.  For instance allowing you to query all of the posts published by a particular user.\n\nUser/Post example:\n```javascript\nottoman.model('Post', {\n  user: {ref:'User'},\n  title: 'string',\n  body: 'string'\n});\n\nottoman.model('User', {\n  name: 'string'\n}, {\n  queries: {\n    myPosts: {\n      of: 'Post',\n      by: 'user'\n    }\n  }\n});\n```\n\n\n## License\n\nCopyright 2013 Couchbase Inc.\n\nLicensed under the Apache License, Version 2.0.\n\nSee [the Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/couchbaselabs/ottoman/issues"
  },
  "_id": "ottoman@1.0.2",
  "dist": {
    "shasum": "a78bbd97725a0dcc301f5575018ad853de34d9d6"
  },
  "_from": "ottoman@~1.0.2",
  "_resolved": "https://registry.npmjs.org/ottoman/-/ottoman-1.0.2.tgz"
}
