{
  "name": "grunt-express-server",
  "description": "Grunt task for running an Express Server that works great with LiveReload + Watch/Regarde",
  "version": "0.5.2",
  "homepage": "https://github.com/ericclemmons/grunt-express-server",
  "author": {
    "name": "Eric Clemmons",
    "email": "eric@smarterspam.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ericclemmons/grunt-express-server.git"
  },
  "bugs": {
    "url": "https://github.com/ericclemmons/grunt-express-server/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ericclemmons/grunt-express-server/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "./node_modules/.bin/grunt"
  },
  "devDependencies": {
    "coffee-script": "^1.7.1",
    "express": "^4.0.0",
    "grunt": "^0.4.4",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-clean": "^0.5.0",
    "grunt-contrib-jshint": "^0.10.0",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt-contrib-watch": "^0.6.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "express",
    "server"
  ],
  "readme": "# grunt-express-server\n\n[![Build Status](https://travis-ci.org/ericclemmons/grunt-express-server.png?branch=master)](https://travis-ci.org/ericclemmons/grunt-express-server)\n[![Dependencies](https://david-dm.org/ericclemmons/grunt-express-server.png)](https://david-dm.org/ericclemmons/grunt-express-server)\n[![devDependencies](https://david-dm.org/ericclemmons/grunt-express-server/dev-status.png)](https://david-dm.org/ericclemmons/grunt-express-server#info=devDependencies&view=table)\n\n> Simple grunt task for running an Express server that works great with LiveReload + Watch/Regarde\n\n## Getting Started\n\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-express-server --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-express-server');\n```\n\n## The `express` task\n\n### Setup\n\nIn your project's Gruntfile, you can create one or multiple servers:\n\n```js\ngrunt.initConfig({\n  express: {\n    options: {\n      // Override defaults here\n    },\n    dev: {\n      options: {\n        script: 'path/to/dev/server.js'\n      }\n    },\n    prod: {\n      options: {\n        script: 'path/to/prod/server.js',\n        node_env: 'production'\n      }\n    },\n    test: {\n      options: {\n        script: 'path/to/test/server.js'\n      }\n    }\n  }\n});\n```\n\nYou can override the default `options` either in the root of the `express` config\nor within each individual server task.\n\n### Default `options`\n\n```js\n  express: {\n    options: {\n      // Override the command used to start the server.\n      // (do not use 'coffee' here, the server will not be able to restart\n      //  see below at opts for coffee-script support)\n      cmd: process.argv[0],\n\n      // Will turn into: `node OPT1 OPT2 ... OPTN path/to/server.js ARG1 ARG2 ... ARGN`\n      // (e.g. opts: ['node_modules/coffee-script/bin/coffee'] will correctly parse coffee-script)\n      opts: [ ],\n      args: [ ],\n\n      // Setting to `false` will effectively just run `node path/to/server.js`\n      background: true,\n\n      // Called when the spawned server throws errors\n      fallback: function() {},\n\n      // Override node env's PORT\n      port: 3000,\n\n      // Override node env's NODE_ENV\n      node_env: undefined,\n\n      // Enable Node's --harmony flag\n      harmony: false,\n\n      // Consider the server to be \"running\" after an explicit delay (in milliseconds)\n      // (e.g. when server has no initial output)\n      delay: 0,\n\n      // Regular expression that matches server output to indicate it is \"running\"\n      output: \".+\",\n\n      // Set --debug (true | false | integer from 1024 to 65535, has precedence over breakOnFirstLine)\n      debug: false,\n\n      // Set --debug-brk (true | false | integer from 1024 to 65535)\n      breakOnFirstLine: false,\n\n      // Object with properties `out` and `err` both will take a path to a log file and\n      // append the output of the server. Make sure the folders exist.\n      logs: undefined\n\n    }\n  }\n```\n\n### Usage\n\nBy default, unless `delay` or `output` has been customized,\n**the server is considered \"running\" once any output is logged to the console**,\nupon which control is passed back to grunt.\n\nTypically, this is:\n\n> Express server listening on port 3000\n\nIf your server doesn't log anything, the express task will never finish and **none** of the following tasks, after it, will be executed. For example - if you have a development task like this one:\n\n```javascript\ngrunt.registerTask('rebuild', ['clean', 'browserify:scripts', 'stylus', 'copy:images']);\ngrunt.registerTask('dev', ['rebuild', 'express', 'watch']);\n```\n\nIf you run the dev task and your server doesn't log anything, **'watch' will never be started**.\n\nThis can easily be avoided, if you log something, when server is created like that:\n\n```javascript\nvar server = http.createServer( app ).listen( PORT, function() {\n    console.log('Express server listening on port ' + PORT);\n} );\n```\n\nIf you log output *before* the server is running, either set `delay` or `output` to indicate\nwhen the server has officially started.\n\n#### Starting the server\n\nIf you have a server defined named `dev`, you can start the server by running `express:dev`. The server only runs as long as grunt is running. Once grunt's tasks have completed, the web server stops.\n\n#### Stopping the server\n\nSimilarly, if you start the `dev` server with `express:dev`, you can stop the server\nwith `express:dev:stop`.\n\n#### With [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n  watch: {\n    express: {\n      files:  [ '**/*.js' ],\n      tasks:  [ 'express:dev' ],\n      options: {\n        spawn: false // for grunt-contrib-watch v0.5.0+, \"nospawn: true\" for lower versions. Without this option specified express won't be reloaded\n      }\n    }\n  }\n});\n\ngrunt.registerTask('server', [ 'express:dev', 'watch' ])\n```\n\n**Important:** Note that the `spawn: false` options only need be applied to the watch target regarding the express task.\nYou may have other watch targets that use `spawn: true`, which is useful, for example, to reload CSS and not LESS changes.\n\n```js\nwatch: {\n  options: {\n    livereload: true\n  },\n  express: {\n    files:  [ '**/*.js' ],\n    tasks:  [ 'express:dev' ],\n    options: {\n      spawn: false\n    }\n  },\n  less: {\n    files: [\"public/**/*.less\"],\n    tasks: [\"less\"],\n    options: {\n      livereload: false\n    }\n  },\n  public: {\n    files: [\"public/**/*.css\", \"public/**/*.js\"]\n  }\n}\n```\n\n## Contributing\n\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n\n- v0.5.2 - Add `hardStop` flag ([#99](https://github.com/ericclemmons/grunt-express-server/pull/99))\n- v0.5.1 - Add `harmony` flag ([#86](https://github.com/ericclemmons/grunt-express-server/pull/86))\n- v0.5.0 - Add breakOnFirstLine option, support for debug ports and fix bugs. Details: ([#68](https://github.com/ericclemmons/grunt-express-server/pull/68), [#70](https://github.com/ericclemmons/grunt-express-server/pull/70), [#73](https://github.com/ericclemmons/grunt-express-server/pull/73))\n- v0.4.19 – Use `process.env.PORT` before `3000` ([#59](https://github.com/ericclemmons/grunt-express-server/pull/59))\n- v0.4.18 – Fix for when running the node debugger ([#57](https://github.com/ericclemmons/grunt-express-server/pull/57))\n- v0.4.17 – Update `devDependencies`...again\n- v0.4.16 – Update `devDependencies`\n- v0.4.15 – Recommend using local `coffee` with additional arguments ([#50](https://github.com/ericclemmons/grunt-express-server/pull/50))\n- v0.4.14 – Attempt to fix issues running Coffeescript ([#54](https://github.com/ericclemmons/grunt-express-server/pull/54))\n- v0.4.13 – Add `--nodejs` for Coffeescript users ([#37](https://github.com/ericclemmons/grunt-express-server/issues/37))\n- v0.4.12 – Only remove this task's listeners ([#39](https://github.com/ericclemmons/grunt-express-server/pull/39))\n- v0.4.11 – Revert v0.4.10 until Travis can reproduce it\n- v0.4.10 – Another attempt to fix #28 & #30's server restarting issue ([#31](https://github.com/ericclemmons/grunt-express-server/pull/31))\n- v0.4.9 – Revert v0.4.8 until [#30](https://github.com/ericclemmons/grunt-express-server/issues/30#issuecomment-29931192) is resolved\n- v0.4.8 – Fix issue with start/restarting multiple instances ([#29](https://github.com/ericclemmons/grunt-express-server/pull/29))\n- v0.4.7 – Remove broken `error` option ([#27](https://github.com/ericclemmons/grunt-express-server/issues/27))\n- v0.4.6 – Store running servers on `process._servers[target]` ([#22](https://github.com/ericclemmons/grunt-express-server/issues/22))\n- v0.4.5 – Support multiple servers running at once ([#23](https://github.com/ericclemmons/grunt-express-server/pull/23))\n- v0.4.4 - Fix for using `grunt-env` to change environments, thanks to @FredrikAppelros ([#20](https://github.com/ericclemmons/grunt-express-server/pull/20))\n- v0.4.3 - Add `cmd` option that defaults to Node, but can be set to `coffee` for Coffeescript support, thanks to @JonET ([#15](https://github.com/ericclemmons/grunt-express-server/pull/15))\n- v0.4.2 - Add `debug` option that gets enables Node's debugger, ideally for use with [node-inspector](https://github.com/node-inspector/node-inspector)\n- v0.4.1 - Add `node_env` option that sets `NODE_ENV` when running the server & restores original env upon closing, thanks to @jgable!\n- v0.4.0\n  - Add `delay` option that, when set, passes control back to grunt after timeout\n  - Add `output` regular expression option that, when set, waits for matching message before passing control back to grunt\n- v0.3.1 - Try to force notification that `express` task has finished as much as possible\n- v0.3.0 - `express` is now a multitask with customizable options, better error handling and `:stop` task\n- v0.2.0\n  - Change `express-server` task to `express`\n  - Config is set via `express: '...'` instead of `server: { script: '...' } `\n- v0.1.0 - Initial import from [Genesis Skeleton](https://github.com/ericclemmons/genesis-skeleton) & release\n\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/ericclemmons/grunt-express-server/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n",
  "readmeFilename": "README.md",
  "_id": "grunt-express-server@0.5.2",
  "dist": {
    "shasum": "eb23bb0bf0f1c1ac35963addb0046089cff4feed"
  },
  "_from": "grunt-express-server@^0.5.0",
  "_resolved": "https://registry.npmjs.org/grunt-express-server/-/grunt-express-server-0.5.2.tgz"
}
